/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compilador;

import static compilador.DoJTree.setTreeState;
import java.awt.Color;
import javax.swing.JTree;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.Principal;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author michael
 */
public class IDE extends javax.swing.JFrame {
    
    String path;
    String nombreArchivo;
    boolean bandLexico = false;
    
   

    /**
     * Creates new form IDE
     */
    public IDE() {
        path = "";
        initComponents();
        SyncronizerClass synchronizer = new SyncronizerClass(area_codigo);
        scrollTextArea.setRowHeaderView(synchronizer);

        StyleContext styleContext = new StyleContext();
        Style defaultStyle = styleContext.getStyle(StyleContext.DEFAULT_STYLE);
        Style cwStyle = styleContext.addStyle("ConstantWidth", null);
        Style commStyle = styleContext.addStyle("ConstantWidth", null);
        Style numStyle = styleContext.addStyle("ConstantWidth", null);
        Color col = new Color(51, 102, 204);
        StyleConstants.setForeground(cwStyle, col);
        col = new Color(171, 171, 171);
        StyleConstants.setForeground(commStyle, col);
        col = new Color(27, 27, 27);
        StyleConstants.setForeground(numStyle, col);
        StyleConstants.setBold(cwStyle, true);
        KeywordStyledDocument doc = new KeywordStyledDocument(defaultStyle, cwStyle, commStyle, numStyle);
        area_codigo.setDocument(doc);
        area_codigo.addCaretListener(new CaretListener() {
            public void caretUpdate(CaretEvent ce) {
                int pos = area_codigo.getCaretPosition();
                Element map = area_codigo.getDocument().getDefaultRootElement();
                int row = map.getElementIndex(pos);
                Element lineElem = map.getElement(row);
                int col = pos - lineElem.getStartOffset();
                updateStatus(row + 1, col + 1);
            }
        });
        eLexicos.setEditable(false);
        status.setEditable(false);
        eSintaxis.setEditable(false);
        eSemantica.setEditable(false);
       
    }
      // Actualiza la fila y la columna en la que se encuentra
    private void updateStatus(int linenumber, int columnnumber) {
        status.setText("Linea: " + linenumber + " Columna: " + columnnumber);
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollTextArea = new javax.swing.JScrollPane();
        area_codigo = new javax.swing.JTextPane();
        status = new javax.swing.JTextField();
        salidas = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        eLexicos = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        eSintaxis = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        eSemantica = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        analisis = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        aLexico = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        aSintaxis = new javax.swing.JTree();
        jScrollPane6 = new javax.swing.JScrollPane();
        aSemantico = new javax.swing.JTree();
        jScrollPane7 = new javax.swing.JScrollPane();
        tHash = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        codigoIntermedio = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        nuevo2 = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar2 = new javax.swing.JMenuItem();
        guardarComo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        cortar = new javax.swing.JMenuItem();
        copiar = new javax.swing.JMenuItem();
        pegar = new javax.swing.JMenuItem();
        run = new javax.swing.JMenu();
        Lexico_Run = new javax.swing.JMenuItem();
        sintactico_menu = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        nuevo = new javax.swing.JMenu();
        guardar3 = new javax.swing.JMenu();
        btnabrir = new javax.swing.JMenu();
        btnguardar = new javax.swing.JMenu();
        salir = new javax.swing.JMenu();
        BarraLexico = new javax.swing.JMenu();
        BarraSintaxis = new javax.swing.JMenu();
        BarraSemantica = new javax.swing.JMenu();
        jMenu11 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        scrollTextArea.setViewportView(area_codigo);

        status.setBackground(new java.awt.Color(204, 204, 255));
        status.setText("Line: 1 Column: 1");

        salidas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salidasMouseClicked(evt);
            }
        });

        eLexicos.setColumns(20);
        eLexicos.setRows(5);
        jScrollPane2.setViewportView(eLexicos);

        salidas.addTab("Errores", jScrollPane2);

        eSintaxis.setColumns(20);
        eSintaxis.setRows(5);
        jScrollPane1.setViewportView(eSintaxis);

        salidas.addTab("Errores Sintacticos", jScrollPane1);

        eSemantica.setColumns(20);
        eSemantica.setRows(5);
        jScrollPane9.setViewportView(eSemantica);

        salidas.addTab("Errores Semanticos", jScrollPane9);

        console.setColumns(20);
        console.setRows(5);
        jScrollPane3.setViewportView(console);

        salidas.addTab("Resultados", jScrollPane3);

        analisis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analisisMouseClicked(evt);
            }
        });

        aLexico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Tipo"
            }
        ));
        jScrollPane4.setViewportView(aLexico);

        analisis.addTab("Lexico", jScrollPane4);

        jScrollPane5.setViewportView(aSintaxis);

        analisis.addTab("Sintactico", jScrollPane5);

        jScrollPane6.setViewportView(aSemantico);

        analisis.addTab("Semantico", jScrollPane6);

        tHash.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Nombre", "Valor", "Location", "Linea(s)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(tHash);

        analisis.addTab("Tabla Hash", jScrollPane7);

        codigoIntermedio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(codigoIntermedio);

        analisis.addTab("Codigo Intermedio", jScrollPane8);

        jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseClicked(evt);
            }
        });

        jMenu1.setText("File");

        nuevo2.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\new1.png")); // NOI18N
        nuevo2.setText("Nuevo");
        nuevo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevo2ActionPerformed(evt);
            }
        });
        jMenu1.add(nuevo2);

        abrir.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\open2.png")); // NOI18N
        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        jMenu1.add(abrir);

        guardar2.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\save1.png")); // NOI18N
        guardar2.setText("Guardar");
        guardar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar2ActionPerformed(evt);
            }
        });
        jMenu1.add(guardar2);

        guardarComo.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\saveas2.png")); // NOI18N
        guardarComo.setText("Guardar Como");
        guardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(guardarComo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        cortar.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\cortar.png")); // NOI18N
        cortar.setText("Cortar");
        cortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cortarActionPerformed(evt);
            }
        });
        jMenu2.add(cortar);

        copiar.setText("Copiar");
        copiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiarActionPerformed(evt);
            }
        });
        jMenu2.add(copiar);

        pegar.setText("Pegar");
        pegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pegarActionPerformed(evt);
            }
        });
        jMenu2.add(pegar);

        jMenuBar1.add(jMenu2);

        run.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\run.png")); // NOI18N

        Lexico_Run.setText("Analizador Léxico");
        Lexico_Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lexico_RunActionPerformed(evt);
            }
        });
        run.add(Lexico_Run);

        sintactico_menu.setText("Analizador Sintactico");
        sintactico_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sintactico_menuActionPerformed(evt);
            }
        });
        run.add(sintactico_menu);

        jMenuItem1.setText("Analizador Semantico");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        run.add(jMenuItem1);

        jMenuBar1.add(run);

        nuevo.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\new.png")); // NOI18N
        nuevo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nuevoMouseClicked(evt);
            }
        });
        jMenuBar1.add(nuevo);

        guardar3.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\saveas2.png")); // NOI18N
        guardar3.setText("Save As");
        guardar3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardar3MouseClicked(evt);
            }
        });
        jMenuBar1.add(guardar3);

        btnabrir.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\open.png")); // NOI18N
        btnabrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnabrirMouseClicked(evt);
            }
        });
        jMenuBar1.add(btnabrir);

        btnguardar.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\saveas.png")); // NOI18N
        btnguardar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnguardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnguardarMouseClicked(evt);
            }
        });
        jMenuBar1.add(btnguardar);

        salir.setIcon(new javax.swing.ImageIcon("C:\\Users\\michael\\Documents\\sem8\\Blanca\\cerrar.png")); // NOI18N
        salir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salirMouseClicked(evt);
            }
        });
        jMenuBar1.add(salir);

        BarraLexico.setText("Lexico");
        BarraLexico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BarraLexicoMouseClicked(evt);
            }
        });
        jMenuBar1.add(BarraLexico);

        BarraSintaxis.setText("Sintactico");
        BarraSintaxis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BarraSintaxisMouseClicked(evt);
            }
        });
        jMenuBar1.add(BarraSintaxis);

        BarraSemantica.setText("Semantico");
        BarraSemantica.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BarraSemanticaMouseClicked(evt);
            }
        });
        jMenuBar1.add(BarraSemantica);

        jMenu11.setText("Compilar");
        jMenuBar1.add(jMenu11);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(status)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(salidas)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scrollTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(analisis, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(analisis, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(salidas, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuBar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuBar1MouseClicked

    private void guardar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar2ActionPerformed
        // TODO add your handling code here:
        if (path.equals("") && path.length() == 0) {
            GuardarComo();
        } else {
            saveAll();
            JOptionPane.showMessageDialog(this, "Guardado con exito");
        }
    }//GEN-LAST:event_guardar2ActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        // TODO add your handling code here:
        Abrir();
    }//GEN-LAST:event_abrirActionPerformed

    private void btnguardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnguardarMouseClicked
        // TODO add your handling code here:
         if (path.equals("") && path.length() == 0) {
            GuardarComo();
        } else {
            saveAll();
            JOptionPane.showMessageDialog(this, "Guardado con exito");
        }  
    }//GEN-LAST:event_btnguardarMouseClicked

    private void btnabrirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnabrirMouseClicked
        // TODO add your handling code here:
        Abrir();
    }//GEN-LAST:event_btnabrirMouseClicked

    private void salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salirMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_salirMouseClicked

    private void guardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarComoActionPerformed
        // TODO add your handling code here:
        GuardarComo();
    }//GEN-LAST:event_guardarComoActionPerformed

    private void nuevoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevoMouseClicked
        // TODO add your handling code here:
        area_codigo.setText("");
        //JOptionPane.showMessageDialog(this, "Nuevo archivo.");
        path = "";
        clearAll();
    }//GEN-LAST:event_nuevoMouseClicked

    private void nuevo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevo2ActionPerformed
        // TODO add your handling code here:
        area_codigo.setText("");
        JOptionPane.showMessageDialog(this, "Nuevo archivo.");
        path = "";
        clearAll();
    }//GEN-LAST:event_nuevo2ActionPerformed

    private void guardar3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardar3MouseClicked
        // TODO add your handling code here:
        GuardarComo();
    }//GEN-LAST:event_guardar3MouseClicked

    private void BarraLexicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BarraLexicoMouseClicked
        // TODO add your handling code here:
        try {
            
            bandLexico = true;
            if (path.equals("") && path.length() == 0) {
                GuardarComo();
            } else {
                saveAll();
                
            }
            Process exec = null;
            try {
                //System.out.println(nombreArchivo+" Path: "+path);
              exec = Runtime.getRuntime().exec("python C:\\Users\\michael\\Documents\\sem8\\Blanca\\Compilador\\AutomataFinito.py " + path);
              //  exec = Runtime.getRuntime().exec("python" + path);
                exec.waitFor();
            } catch (IOException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
            InputStream is = exec.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String salida = br.readLine();
            System.out.println("Salida: " + salida);
            openA_Lexico();
            openE_Lexico();
        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BarraLexicoMouseClicked

    private void salidasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salidasMouseClicked
        // TODO add your handling code here:
        if (bandLexico) {
            openE_Lexico();
        }
    }//GEN-LAST:event_salidasMouseClicked

    private void analisisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analisisMouseClicked
        // TODO add your handling code here:
        if (bandLexico) {
            openA_Lexico();
        }
    }//GEN-LAST:event_analisisMouseClicked

    private void cortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cortarActionPerformed
        // TODO add your handling code here:
        area_codigo.cut();
    }//GEN-LAST:event_cortarActionPerformed

    private void copiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiarActionPerformed
        // TODO add your handling code here:
        area_codigo.copy();
    }//GEN-LAST:event_copiarActionPerformed

    private void pegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pegarActionPerformed
        // TODO add your handling code here:
         area_codigo.paste();
    }//GEN-LAST:event_pegarActionPerformed

    private void Lexico_RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lexico_RunActionPerformed
        // TODO add your handling code here:
        try {
            bandLexico = true;
            if (path.equals("") && path.length() == 0) {
                GuardarComo();
            } else {
                saveAll();
          
            }
            Process exec = null;
            try {
                //System.out.println(nombreArchivo+" Path: "+path);
                exec = Runtime.getRuntime().exec("python C:\\Users\\michael\\Documents\\sem8\\Blanca\\Compilador\\AutomataFinito.py " + path);
            } catch (IOException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
            InputStream is = exec.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String salida = br.readLine();
            System.out.println("Salida: " + salida);
            openA_Lexico();
            openE_Lexico();
        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_Lexico_RunActionPerformed

    private void BarraSintaxisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BarraSintaxisMouseClicked
       // TODO add your handling code here:
        BarraLexicoMouseClicked(evt);
        //JOptionPane.showMessageDialog(this, "Código guardado\nEjecutando Analizador");
        try {
            //Process exec = null;
            Runtime exec = Runtime.getRuntime();
            Process comando = null;
            try {
                //System.out.println(nombreArchivo+" Path: "+path);
                comando = exec.exec("python C:\\Users\\michael\\Documents\\sem8\\Blanca\\Compilador\\ArbolGramatical.py ");
                comando.waitFor();
            } catch (IOException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
            InputStream is = comando.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String salida = br.readLine();
            System.out.println("Salida: " + salida);
            openE_Sintactico();
            openA_Sintactico();
            //printHashTable();

        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BarraSintaxisMouseClicked

    private void BarraSemanticaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BarraSemanticaMouseClicked
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(this, "guardado\nEjecutando...");
        try {
            //Process exec = null;
            Runtime exec = Runtime.getRuntime();
            Process comando = null;
            try {
                //System.out.println(nombreArchivo+" Path: "+path);
                comando = exec.exec("python C:\\Users\\michael\\Documents\\sem8\\Blanca\\Compilador\\ArbolGramatical.py ");
                comando.waitFor();
            } catch (IOException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
            InputStream is = comando.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String salida = br.readLine();
            System.out.println("Salida: " + salida);
            openE_Semantico();
            openA_Semantico();
            printHashTable();
            openCIntermedio();
            callConect();
        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BarraSemanticaMouseClicked

    private void sintactico_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sintactico_menuActionPerformed
         // TODO add your handling code here:
        //JOptionPane.showMessageDialog(this, "Código guardado\nEjecutando Analizador");
        try {
            //Process exec = null;
            Runtime exec = Runtime.getRuntime();
            Process comando = null;
            try {
                //System.out.println(nombreArchivo+" Path: "+path);
                comando = exec.exec("python C:\\Users\\michael\\Documents\\sem8\\Blanca\\Compilador\\ArbolGramatical.py ");
                System.out.println(comando.isAlive());
                comando.waitFor();
            } catch (IOException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
            InputStream is = comando.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String salida = br.readLine();
            System.out.println("Salida: " + salida);
            openE_Sintactico();
            openA_Sintactico();

        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sintactico_menuActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
         // TODO add your handling code here:
        //JOptionPane.showMessageDialog(this, "guardado\nEjecutando...");
        try {
            //Process exec = null;
            Runtime exec = Runtime.getRuntime();
            Process comando = null;
            try {
                //System.out.println(nombreArchivo+" Path: "+path);
                comando = exec.exec("python C:\\Users\\michael\\Documents\\sem8\\Blanca\\Compilador\\ArbolGramatical.py ");
                comando.waitFor();
            } catch (IOException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
            InputStream is = comando.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String salida = br.readLine();
            System.out.println("Salida: " + salida);
            openE_Semantico();
            openA_Semantico();
            printHashTable();

        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu BarraLexico;
    private javax.swing.JMenu BarraSemantica;
    private javax.swing.JMenu BarraSintaxis;
    private javax.swing.JMenuItem Lexico_Run;
    private javax.swing.JTable aLexico;
    private javax.swing.JTree aSemantico;
    private javax.swing.JTree aSintaxis;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JTabbedPane analisis;
    private javax.swing.JTextPane area_codigo;
    private javax.swing.JMenu btnabrir;
    private javax.swing.JMenu btnguardar;
    private javax.swing.JTable codigoIntermedio;
    private javax.swing.JTextArea console;
    private javax.swing.JMenuItem copiar;
    private javax.swing.JMenuItem cortar;
    private javax.swing.JTextArea eLexicos;
    private javax.swing.JTextArea eSemantica;
    private javax.swing.JTextArea eSintaxis;
    private javax.swing.JMenuItem guardar2;
    private javax.swing.JMenu guardar3;
    private javax.swing.JMenuItem guardarComo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JMenu nuevo;
    private javax.swing.JMenuItem nuevo2;
    private javax.swing.JMenuItem pegar;
    private javax.swing.JMenu run;
    private javax.swing.JTabbedPane salidas;
    private javax.swing.JMenu salir;
    private javax.swing.JScrollPane scrollTextArea;
    private javax.swing.JMenuItem sintactico_menu;
    private javax.swing.JTextField status;
    private javax.swing.JTable tHash;
    // End of variables declaration//GEN-END:variables

    private void callConect() {
        console.setText("");
        try {            
            Conect proceso = new Conect(console);
            proceso.start();
            analisis.setSelectedIndex(4);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    public void openA_Lexico() {
       DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Token");
        modelo.addColumn("Tipo");

        aLexico.setModel(modelo);
        String data = "";

        try {
            File arch = new File("Tokens.txt");
            BufferedReader leer = new BufferedReader(new FileReader(arch));
            while ((data = leer.readLine()) != null) {
                String datos[] = data.split("\t");
                if (!datos[0].equals("ENDFILE")) {
                    modelo.addRow(new Object[]{datos[0], datos[1]});
                }
            }
            leer.close();
        } catch (IOException e) {
        }
        aLexico.setEnabled(false);
    }

    public void openE_Lexico() {
        String file = "", message = "";
        try {
            File arch = new File("Errores.txt");
            if (arch != null) {
                eLexicos.setText("");
                FileReader archR = new FileReader(arch);
                BufferedReader leer = new BufferedReader(archR);
                while ((file = leer.readLine()) != null) {
                    message += file + "\n";
                }
                eLexicos.setText(message);
                leer.close();
            }
        } catch (IOException Exception) {
            eLexicos.setText(Exception.getMessage());
           
        }
    }

    public void clearAll() {
        eLexicos.setText("");
        eSintaxis.setText("");
        eSemantica.setText("");
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Tipo");
        modelo.addColumn("Nombre");
        modelo.addColumn("Valor");
        modelo.addColumn("Location");
        modelo.addColumn("Linea(s)");
        tHash.setModel(modelo);
        modelo = new DefaultTableModel();
        modelo.addColumn("Token");
        modelo.addColumn("Tipo");
        aLexico.setModel(modelo);
    }

    public void Abrir() {
          String file = "", message = "";
        try {
            JFileChooser fc = new JFileChooser(System.getProperty("user.dir"));    
            if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File arch = fc.getSelectedFile();
                path = arch.getAbsolutePath();
                if (arch != null) {
                    area_codigo.setText("");
                    FileReader archR = new FileReader(arch);
                    BufferedReader leer = new BufferedReader(archR);
                    while ((file = leer.readLine()) != null) {
                        message += file + "\n";
                    }
                    area_codigo.setText(message);
                    leer.close();
                    nombreArchivo = fc.getSelectedFile().getName();
                }
                clearAll();
            }
        } catch (IOException Exception) {
            area_codigo.setText(Exception.getMessage());
    
        }
    }

    public void GuardarComo() {
        String txt = "", nombre = "";
        try {
            JFileChooser fc = new JFileChooser(System.getProperty("user.dir"));
            
            if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File save = fc.getSelectedFile();
                path = save.getAbsolutePath();
                if (save != null) {
                    nombre = fc.getSelectedFile().getName();
                    FileWriter saveAux = new FileWriter(save);
                    saveAux.write(area_codigo.getText());
                    saveAux.close();
                }
                nombreArchivo = fc.getSelectedFile().getName();
            }
           
        } catch (IOException ioe) {
            area_codigo.setText(ioe.getMessage());
            
        }
    }

    public void saveAll() {
        try {
            File save = new File(path);
            nombreArchivo = save.getName();
           
            if (save != null) {
                
                FileWriter saveAux = new FileWriter(save);
                saveAux.write(area_codigo.getText());
                saveAux.close();
            }
        } catch (IOException ioe) {
            area_codigo.setText(ioe.getMessage());
           
        }
    }

    public void openE_Sintactico() {
        String file = "", message = "";
        String[] datos;
        try {
            File arch = new File("ErroresSintaxis.txt");
            if (arch != null) {
                eSintaxis.setText("");
                FileReader archR = new FileReader(arch);
                BufferedReader leer = new BufferedReader(archR);
                while ((file = leer.readLine()) != null) {
                    datos = file.split(" ");
                    //if (!datos[9].equals("ENDFILE")) {                                                
                    message += file + "\n";
                    //}
                }
                eSintaxis.setText(message);
                leer.close();
            }
        } catch (IOException Exception) {
            eSintaxis.setText(Exception.getMessage());
            //System.out.println(Exception.getMessage());
        }
    }

    public void openA_Sintactico() throws IOException {
        DoJTree obj = new DoJTree();
        aSintaxis.setModel(obj.arbol());
        aSintaxis.expandPath(aSintaxis.getPathForRow(1));
        setTreeState(aSintaxis, aSintaxis.getPathForRow(0), true);
    }

    public static void setTreeState(JTree tree, boolean expanded) {
        Object root = tree.getModel().getRoot();
        setTreeState(tree, new TreePath(root), expanded);
    }

    public static void setTreeState(JTree tree, TreePath path, boolean expanded) {
        Object lastNode = path.getLastPathComponent();
        for (int i = 0; i < tree.getModel().getChildCount(lastNode); i++) {
            Object child = tree.getModel().getChild(lastNode, i);
            TreePath pathToChild = path.pathByAddingChild(child);
            setTreeState(tree, pathToChild, expanded);
        }
        if (expanded) {
            tree.expandPath(path);
        } else {
            tree.collapsePath(path);
        }

    }

    public void openE_Semantico() {
        String file = "", message = "";
        String[] datos;
        try {
            File arch = new File("ErroresSemanticos.txt");
            if (arch != null) {
                eSemantica.setText("");
                FileReader archR = new FileReader(arch);
                BufferedReader leer = new BufferedReader(archR);
                while ((file = leer.readLine()) != null) {
                    datos = file.split(" ");
                    //if (!datos[9].equals("ENDFILE")) {                                                
                    message += file + "\n";
                    //}
                }
                eSemantica.setText(message);
                leer.close();
            }
        } catch (IOException Exception) {
            eSemantica.setText(Exception.getMessage());
            //System.out.println(Exception.getMessage());
        }
    }

    public void openA_Semantico() throws IOException {
        DoJTree obj = new DoJTree();
        aSemantico.setModel(obj.arbolSemantica());
        aSemantico.expandPath(aSemantico.getPathForRow(1));
        setTreeState(aSemantico, aSemantico.getPathForRow(0), true);
    }

    //Imprime la tabla hash en pantalla
    public void printHashTable() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Tipo");
        modelo.addColumn("Nombre");
        modelo.addColumn("Valor");
        modelo.addColumn("Location");
        modelo.addColumn("Linea(s)");
        tHash.setModel(modelo);
        String data = "";

        try {
            File arch = new File(".\\TablaHash.txt");
            BufferedReader leer = new BufferedReader(new FileReader(arch));

            while ((data = leer.readLine()) != null) {
                String datos[] = data.split("\t");
                String valor;
                if (datos[2].equals("None")) {
                    valor = "-";
                } else {
                    valor = datos[2];
                }
                modelo.addRow(new Object[]{datos[0], datos[1], valor, datos[3], datos[4]});
            }
            leer.close();
        } catch (IOException e) {
        }
        tHash.setEnabled(false);
    }

    public void openCIntermedio() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Localidad");
        modelo.addColumn("Nemónico");
        modelo.addColumn("Arg 1");
        modelo.addColumn("Arg 2");
        modelo.addColumn("Arg 3");
        codigoIntermedio.setModel(modelo);
        String data = "";
        try {
            File arch = new File(".\\readToTM.txt");
            BufferedReader leer = new BufferedReader(new FileReader(arch));
            while ((data = leer.readLine()) != null) {
                String datos[] = data.split("\t");
                modelo.addRow(new Object[]{datos[0], datos[1], datos[2], datos[3], datos[4]});
            }
            leer.close();
        } catch (IOException Exception) {
        }
        codigoIntermedio.setEnabled(false);
    }
}
